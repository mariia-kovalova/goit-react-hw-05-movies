{"version":3,"file":"static/js/397.ad1816b7.chunk.js","mappings":"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","sources":["api/movies-service.js","components/Loader/Loader.jsx","components/MovieItem/MovieItem.styled.jsx","components/MovieItem/MovieItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/MuiPagination/MuiPagination.styled.jsx","components/MuiPagination/MuiPagination.jsx","utils/infoConverter.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f68110fe6010762197ab45abbadc1a08';\n\nexport const getTrendingFilms = async page => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmsByKeyword = async ({ query, page }) => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n      include_adult: false,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmTrailer = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/videos`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmCast = async movie_id => {\n  const { data } = await axios.get(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmReviews = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport { Backdrop, CircularProgress } from '@mui/material';\n\nexport const Loader = ({ open }) => (\n  <>\n    <Backdrop\n      sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }}\n      open={open}\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  </>\n);\n\nLoader.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n","import styled from '@emotion/styled/macro';\nimport { Link } from 'react-router-dom';\n\nexport const CardLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nexport const Poster = styled.img`\n  height: 398px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  transition: transform 250ms linear;\n\n  ${CardLink}:hover &, ${CardLink}:focus & {\n    transform: scale(0.95);\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 455px;\n    margin-bottom: 8px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    height: 574px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-family: var(--font-primary);\n  font-size: 12px;\n  line-height: 1.33;\n  text-transform: uppercase;\n  color: var(--color-text-dark);\n  transition: transform 300ms ease-in-out, color 300ms ease-in-out;\n\n  ${CardLink}:hover &, ${CardLink}:focus & {\n    transform: translateX(10px);\n    color: #f86c00;\n  }\n\n  @media screen and (min-width: 1280px) {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Text = styled.p`\n  font-family: var(--font-primary);\n  font-size: 12px;\n  line-height: 1.33;\n  color: var(--color-card__text);\n  transition: transform 300ms ease-in-out, color 300ms ease-in-out;\n\n  ${CardLink}:hover &, ${CardLink}:focus & {\n    transform: translateX(10px);\n    color: var(--color-text-dark);\n  }\n\n  @media screen and (min-width: 1280px) {\n    font-size: 20px;\n    line-height: 1.2;\n  }\n`;\n\nexport const Rating = styled.span`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 36px;\n  height: 16px;\n\n  font-size: 12px;\n  line-height: 1.167;\n  text-align: center;\n  background-color: var(--color-accent);\n  color: var(--color-text-light);\n  border-radius: 5px;\n  margin-left: 8px;\n\n  @media screen and (min-width: 1280px) {\n    width: 40px;\n    height: 20px;\n    vertical-align: text-bottom;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  converTittle,\n  getFullYear,\n  getGenresListById,\n  getSrc,\n} from 'utils/infoConverter';\nimport { CardLink, Poster, Text, Title } from './MovieItem.styled';\n\nexport const MovieItem = ({\n  movie: { id, poster_path, title, release_date, genre_ids },\n}) => {\n  const location = useLocation();\n  const year = getFullYear(release_date);\n  const genresList = getGenresListById(genre_ids);\n  const convertedTitle = converTittle(title);\n  const src = getSrc(poster_path);\n  return (\n    <CardLink to={`/movies/${id}`} state={{ from: location }}>\n      <Poster src={src} alt={title} loading=\"lazy\" />\n      <Title>{convertedTitle}</Title>\n      <Text>\n        {genresList} {genresList && '|'} {year}\n      </Text>\n    </CardLink>\n  );\n};\n\nMovieItem.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string,\n    genre_ids: PropTypes.arrayOf(PropTypes.number),\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  row-gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    row-gap: 32px;\n    column-gap: 32px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    column-gap: 16px;\n  }\n`;\n\nexport const Item = styled.li`\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 32px) / 2);\n  }\n\n  @media screen and (min-width: 1280px) {\n    flex-basis: calc((100% - 32px) / 3);\n  }\n`;\n","import { MovieItem } from 'components/MovieItem';\nimport PropTypes from 'prop-types';\nimport { List, Item } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(movie => (\n        <Item key={movie.id}>\n          <MovieItem movie={movie} />\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 40px;\n`;\n","import { Pagination } from '@mui/material';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { Wrap } from './MuiPagination.styled';\n\nconst theme = createTheme({\n  palette: {\n    primary: { main: '#ff6b08', contrastText: '#ffffff' },\n  },\n});\n\nexport const MuiPagination = ({ count, page, onChange }) => {\n  if (count > 1)\n    return (\n      <ThemeProvider theme={theme}>\n        <Wrap>\n          <Pagination\n            color=\"primary\"\n            shape=\"rounded\"\n            count={count}\n            page={page}\n            onChange={onChange}\n          />\n        </Wrap>\n      </ThemeProvider>\n    );\n};\n","import allGenres from 'data/genres.json';\n\nexport const getSrc = poster_path => {\n  const BASE_SRC = 'https://image.tmdb.org/t/p/w500';\n  const FALLBACK_SRC = 'https://ik.imagekit.io/blsadqwgu/comingSoon.webp';\n  if (!poster_path) return FALLBACK_SRC;\n  return `${BASE_SRC}${poster_path}`;\n};\n\nexport const getCastSrc = poster_path => {\n  const BASE_SRC = 'https://image.tmdb.org/t/p/w200';\n  const FALLBACK_SRC = 'https://ik.imagekit.io/blsadqwgu/no-person-200x300.png';\n  if (!poster_path) return FALLBACK_SRC;\n  return `${BASE_SRC}${poster_path}`;\n};\n\nexport const converTittle = title => {\n  if (title.length <= 34) return title;\n  const start = title.slice(0, 14);\n  const end = title.slice(-14);\n  return `${start}...${end}`;\n};\n\nexport const getFullYear = release_date => {\n  const date = new Date(release_date || new Date());\n  return date.getFullYear();\n};\n\nexport const getGenresListFromArr = genres => {\n  const genresArr = genres.map(genre => genre.name);\n  if (genresArr.length <= 2) return genresArr.join(' ');\n  return `${genresArr.slice(0, 2).join(', ')}, Other`;\n};\n\nexport const getGenresListById = genre_ids => {\n  const { genres } = allGenres;\n  const genresArr = genre_ids.map(genreId => {\n    const [{ name }] = genres.filter(({ id }) => id === genreId);\n    return name;\n  });\n  if (genresArr.length <= 2) return genresArr.join(' ');\n  return `${genresArr.slice(0, 2).join(', ')}, Other`;\n};\n\nexport const fixedNumber = vote_average =>\n  !vote_average ? '0.0' : vote_average.toFixed(1);\n"],"names":["axios","API_KEY","getTrendingFilms","page","params","api_key","data","getFilmsByKeyword","query","include_adult","getFilmById","movie_id","getFilmCast","getFilmReviews","Loader","open","Backdrop","sx","color","zIndex","theme","drawer","CircularProgress","CardLink","Link","Poster","Title","Text","MovieItem","movie","id","poster_path","title","release_date","genre_ids","location","useLocation","year","getFullYear","genresList","getGenresListById","convertedTitle","converTittle","src","getSrc","to","state","from","alt","loading","List","styled","Item","MoviesList","movies","map","Wrap","createTheme","palette","primary","main","contrastText","MuiPagination","count","onChange","ThemeProvider","Pagination","shape","getCastSrc","length","start","slice","end","Date","getGenresListFromArr","genres","genresArr","genre","name","join","allGenres","genreId","filter","fixedNumber","vote_average","toFixed"],"sourceRoot":""}