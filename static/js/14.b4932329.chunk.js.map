{"version":3,"file":"static/js/14.b4932329.chunk.js","mappings":"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","sources":["api/movies-service.js","components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","utils/infoConverter.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'f68110fe6010762197ab45abbadc1a08';\n\nexport const getTrendingFilms = async page => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmsByKeyword = async ({ query, page }) => {\n  const { data } = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n      page,\n      include_adult: false,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmById = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmTrailer = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/videos`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmCast = async movie_id => {\n  const { data } = await axios.get(`movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getFilmReviews = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  color: var(--color-text-dark);\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { getCastSrc } from 'utils/infoConverter';\nimport { Text, Wrap } from './CastCard.styled';\n\nexport const CastCard = ({ item: { name, profile_path, character } }) => {\n  const src = getCastSrc(profile_path);\n  return (\n    <Wrap>\n      <img src={src} alt={name} width=\"200\" height=\"300\" />\n      <div>\n        <Text> {name}</Text>\n        <Text>Character: {character}</Text>\n      </div>\n    </Wrap>\n  );\n};\n\nCastCard.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string,\n    profile_path: PropTypes.string,\n    character: PropTypes.string,\n  }),\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  color: var(--color-text-dark);\n  margin-bottom: 30px;\n  text-align: center;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: start;\n  gap: 20px;\n\n  @media screen and (min-width: 768px) {\n    justify-content: center;\n  }\n`;\n\nexport const Item = styled.li`\n  width: 200px;\n`;\n\nexport const Wrap = styled.div`\n  min-height: 400px;\n`;\n","import { getFilmCast } from 'api/movies-service';\nimport { CastCard } from 'components/CastCard';\nimport { Error } from 'components/Error';\nimport { Container, LightSection } from 'components/GlobalStyles.styled';\nimport { Loader } from 'components/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { List, Title, Wrap, Item } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async movieId => {\n      try {\n        setError(null);\n        setIsLoading(true);\n        const data = await getFilmCast(movieId);\n        const minCast = data.cast.slice(0, 10);\n        setCast(minCast);\n      } catch (error) {\n        setError(error);\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  return (\n    <Container>\n      <LightSection>\n        <Wrap>\n          <Title>Movie cast: </Title>\n          {!isLoading && !error && cast && cast.length > 0 && (\n            <List>\n              {cast.map(item => (\n                <Item key={item.id}>\n                  <CastCard item={item} />\n                </Item>\n              ))}\n            </List>\n          )}\n          {!isLoading && !error && cast && cast.length === 0 && (\n            <Error>There is no information about cast.</Error>\n          )}\n          {isLoading && <Loader open={isLoading} />}\n          {error && <Error>Sorry, something went wrong...</Error>}\n        </Wrap>\n      </LightSection>\n    </Container>\n  );\n};\n\nexport default Cast;\n","import PropTypes from 'prop-types';\nimport { Backdrop, CircularProgress } from '@mui/material';\n\nexport const Loader = ({ open }) => (\n  <>\n    <Backdrop\n      sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }}\n      open={open}\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  </>\n);\n\nLoader.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n","import allGenres from 'data/genres.json';\n\nexport const getSrc = poster_path => {\n  const BASE_SRC = 'https://image.tmdb.org/t/p/w500';\n  const FALLBACK_SRC = 'https://ik.imagekit.io/blsadqwgu/comingSoon.webp';\n  if (!poster_path) return FALLBACK_SRC;\n  return `${BASE_SRC}${poster_path}`;\n};\n\nexport const getCastSrc = poster_path => {\n  const BASE_SRC = 'https://image.tmdb.org/t/p/w200';\n  const FALLBACK_SRC = 'https://ik.imagekit.io/blsadqwgu/no-person-200x300.png';\n  if (!poster_path) return FALLBACK_SRC;\n  return `${BASE_SRC}${poster_path}`;\n};\n\nexport const converTittle = title => {\n  if (title.length <= 34) return title;\n  const start = title.slice(0, 14);\n  const end = title.slice(-14);\n  return `${start}...${end}`;\n};\n\nexport const getFullYear = release_date => {\n  const date = new Date(release_date || new Date());\n  return date.getFullYear();\n};\n\nexport const getGenresListFromArr = genres => {\n  const genresArr = genres.map(genre => genre.name);\n  if (genresArr.length <= 2) return genresArr.join(' ');\n  return `${genresArr.slice(0, 2).join(', ')}, Other`;\n};\n\nexport const getGenresListById = genre_ids => {\n  const { genres } = allGenres;\n  const genresArr = genre_ids.map(genreId => {\n    const [{ name }] = genres.filter(({ id }) => id === genreId);\n    return name;\n  });\n  if (genresArr.length <= 2) return genresArr.join(' ');\n  return `${genresArr.slice(0, 2).join(', ')}, Other`;\n};\n\nexport const fixedNumber = vote_average =>\n  !vote_average ? '0.0' : vote_average.toFixed(1);\n"],"names":["axios","API_KEY","getTrendingFilms","page","params","api_key","data","getFilmsByKeyword","query","include_adult","getFilmById","movie_id","getFilmCast","getFilmReviews","Text","styled","Wrap","CastCard","item","name","profile_path","character","src","getCastSrc","alt","width","height","Title","List","Item","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","getCast","minCast","slice","console","log","length","map","id","Error","Loader","open","Backdrop","sx","color","zIndex","theme","drawer","CircularProgress","getSrc","poster_path","converTittle","title","start","end","getFullYear","release_date","Date","getGenresListFromArr","genres","genresArr","genre","join","getGenresListById","genre_ids","allGenres","genreId","filter","fixedNumber","vote_average","toFixed"],"sourceRoot":""}